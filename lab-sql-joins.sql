-- ==================================================
-- SETTING UP THE DATABASE
-- ==================================================

-- Setting the working database
USE sakila;

-- List the number of films per category.

select C.name, COUNT(*) AS films_quantity
	from sakila.category as C 
join sakila.film_category AS FC 
	on C.category_id = fc.category_id 
group by C.name;

-- Retrieve the store ID, city, and country for each store.

select S.store_id, C.city, CTRY.country
	FROM sakila.store as S
JOIN sakila.address as A ON S.address_id = A.address_id
JOIN sakila.city as C ON A.city_id = C.city_id
JOIN sakila.country as CTRY ON C.country_id = CTRY.country_id;

-- Calculate the total revenue generated by each store in dollars.

select C.store_id, CONCAT('$', FORMAT(SUM(PY.amount), 2)) AS total_amount
	FROM sakila.payment as PY
JOIN sakila.customer as C 
	ON PY.customer_id = C.customer_id
group by C.store_id;

-- Determine the average running time of films for each category.

select CT.name, AVG(F.length) as Average_per_Category
	FROM sakila.film as F
JOIN sakila.film_category as FC
	ON FC.film_id = F.film_id 
JOIN sakila.category as CT
	ON CT.category_id = FC.category_id
GROUP by FC.category_id
ORDER BY Average_per_Category desc;

-- Identify the film categories with the longest average running time.

select CT.name, AVG(F.length) as Average_per_Category
	FROM sakila.film as F
JOIN sakila.film_category as FC
	ON FC.film_id = F.film_id 
JOIN sakila.category as CT
	ON CT.category_id = FC.category_id
GROUP by FC.category_id
ORDER BY Average_per_Category desc
limit 1;

-- Display the top 10 most frequently rented movies in descending order.

select F.title, COUNT(*) as frequency
	FROM sakila.rental as R
JOIN sakila.inventory as I
	ON R.inventory_id = I.inventory_id
JOIN sakila.film as F
	ON F.film_id = I.film_id
GROUP BY I.film_id
ORDER BY frequency desc
LIMIT 10;

-- Determine if "Academy Dinosaur" can be rented from Store 1.

SELECT f.title, S.store_id 
	FROM sakila.film as F
JOIN sakila.inventory as I
	ON I.film_id = F.film_id
JOIN sakila.store as S
	ON I.store_id = S.store_id
WHERE S.store_id = 1
HAVING f.title IN ("Academy Dinosaur");

SELECT
    f.title,
    CASE
        WHEN IFNULL(i.film_id, 0) = 0 THEN 'NOT available'
        ELSE 'Available'
    END AS availability_status
FROM
    sakila.film as f
LEFT JOIN
    sakila.inventory as I ON f.film_id = i.film_id
WHERE I.store_id = 1
HAVING f.title IN ("Academy Dinosaur");

-- Provide a list of all distinct film titles, along with their availability status in the inventory. 
-- Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."

SELECT
    f.title,
    CASE
        WHEN IFNULL(I.film_id, 0) = 0 THEN 'NOT available'
        ELSE 'Available'
    END AS availability_status
FROM
    sakila.film as F
LEFT JOIN
    sakila.inventory as I ON F.film_id = I.film_id
GROUP BY
    F.title, F.film_id
ORDER BY
    F.title;


